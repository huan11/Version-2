    // Jenkinsfile
    pipeline {
      agent { label 'maven' }


      stages {

        stage('Checkout') {
          steps {
           git url: "http://gogs-ocp-workshop.${JENKINS_APP_DOMAIN}/${JENKINS_GOGS_USER}/SecurityDemos.git"
          } // steps
        } // stage

        stage('Build') {
        steps {
             sh "mvn -Dmaven.test.skip=true clean package"
          } // steps
        } // stage

        stage('Run tests') {
        steps {
             sh "mvn test"
             junit 'target/surefire-reports/*.xml'
          } // steps

        } // stage

        stage('SonarQube Scan') {
          steps {
            sh "mvn sonar:sonar -Dsonar.host.url=http://sonarqube.ocp-workshop.svc:9000 -Dsonar.projectkey=${JENKINS_GOGS_USER}-ecommerce -Dsonar.projectName=\"${JENKINS_GOGS_USER} E-Commerce Project\""
          } // steps
        } // stage

        stage('Archive to nexus') {
          steps {
            sh "mvn --settings mvn.xml deploy -Dmaven.test.skip=true"
          } // steps
        } // stage

        stage('Build Image') {
          steps {
            sh "oc new-build --name ecommerce --strategy=docker --binary || true"
            sh "mkdir deploy || true"
            sh "cp target/spring-boot-angular-ecommerce-0.0.1-SNAPSHOT.jar deploy"
            sh "cp Dockerfile deploy"
            sh "oc start-build ecommerce --from-dir=deploy --follow --wait"
          } // steps
        } // stage

        stage('Push Image to Quay') {
          agent { label 'image-management' }
          steps {
            sh "oc login -u ${JENKINS_GOGS_USER} -p r3dh4t1! --insecure-skip-tls-verify ${JENKINS_OCP_API_ENDPOINT}"
            sh 'skopeo --debug copy --src-creds="$(oc whoami)":"$(oc whoami -t)" --src-tls-verify=false --dest-tls-verify=false' + " --dest-creds=admin:admin123 docker://${JENKINS_INTERNAL_REGISTRY}/${JENKINS_GOGS_USER}/ecommerce:latest docker://quay-secure-quay-enterprise.${JENKINS_APP_DOMAIN}/admin/ecommerce:${JENKINS_GOGS_USER} || true"
          } // steps
        } //stage

        stage('OpenSCAP Scans') {
          agent { label 'master' }
          steps {

          script {
             def remote = [:]
             remote.name = "bastion"
             //remote.host = "bastion.${JENKINS_GUID}.openshiftworkshop.com"
             remote.host = "${JENKINS_BASTION}"
             remote.allowAnyHosts = true
             remote.user="${JENKINS_GOGS_USER}"
             remote.password="${JENKINS_SSH_PASSWORD}"
             
             sshCommand remote: remote, command: "oc login -u ${JENKINS_GOGS_USER} -p r3dh4t1! --insecure-skip-tls-verify ${JENKINS_OCP_API_ENDPOINT}"
             sshCommand remote: remote, command: "docker login -u ${JENKINS_GOGS_USER} -p " + '"$(oc whoami -t)"' + " ${JENKINS_INTERNAL_REGISTRY}"
             sshCommand remote: remote, command: "docker pull ${JENKINS_INTERNAL_REGISTRY}/${JENKINS_GOGS_USER}/ecommerce:latest"
             sshCommand remote: remote, command: "sudo oscap-docker image ${JENKINS_INTERNAL_REGISTRY}/${JENKINS_GOGS_USER}/ecommerce:latest xccdf eval --profile xccdf_org.ssgproject.content_profile_stig-rhel7-disa --report report.html /usr/share/xml/scap/ssg/content/ssg-rhel7-ds.xml"
             sshCommand remote: remote, command: "sudo oscap-docker image-cve ${JENKINS_INTERNAL_REGISTRY}/${JENKINS_GOGS_USER}/ecommerce:latest --report report-cve.html"
             sshGet remote: remote, from: "/home/${JENKINS_GOGS_USER}/report.html", into: 'openscap-compliance-report.html', override: true
             sshGet remote: remote, from: "/home/${JENKINS_GOGS_USER}/report-cve.html", into: 'openscap-cve-report.html', override: true
             publishHTML([alwaysLinkToLastBuild: false, keepAll: false, reportDir: './', reportFiles: 'openscap-compliance-report.html', reportName: 'OpenSCAP Compliance Report', reportTitles: 'OpenSCAP Compliance Report'])
             publishHTML([alwaysLinkToLastBuild: false, keepAll: false, reportDir: './', reportFiles: 'openscap-cve-report.html', reportName: 'OpenSCAP Vulnerability Report', reportTitles: 'OpenSCAP Vulnerability Report'])
             archiveArtifacts 'openscap-compliance-report.html,openscap-cve-report.html'
            } // script
          } // steps
        } // stage

        stage('Deploy') {
          steps {
            sh "oc new-app ecommerce || true"
            sh "oc set env dc/ecommerce JAVA_ARGS=/deployments/root.jar"
            sh "oc expose svc/ecommerce || true"
            sh "oc rollout status dc/ecommerce"
          } // steps
        } // stage

        stage('OWASP ZAP Scan') {
          agent { label 'zap' }
          steps {
            script {
              sh "/zap/zap-baseline.py -r owasp-zap-baseline.html -t http://ecommerce.${JENKINS_GOGS_USER}.svc:8080/ -t http://ecommerce.${JENKINS_GOGS_USER}.svc:8080/api/products -t http://ecommerce.${JENKINS_GOGS_USER}.svc:8080/api/orders || true"
              sh "cp /zap/wrk/owasp-zap-baseline.html ."
              publishHTML([alwaysLinkToLastBuild: false, keepAll: false, reportDir: './', reportFiles: 'owasp-zap-baseline.html', reportName: 'OWASP ZAP Baseline Report', reportTitles: ''])
              archiveArtifacts 'owasp-zap-baseline.html'
            } // script
          } // steps
        } // stage

        stage('Configure Stage Project') {
          steps {
            script {
              sh "set +x ; oc login -u ${JENKINS_GOGS_USER} -p ${JENKINS_SSH_PASSWORD} --insecure-skip-tls-verify https://kubernetes.default.svc"
              sh "oc create is ecommerce -n ${JENKINS_GOGS_USER}-stage || true"
              sh "oc new-app ecommerce --image-stream=ecommerce --allow-missing-images --allow-missing-imagestream-tags -n ${JENKINS_GOGS_USER}-stage || true"
              sh "oc expose dc/ecommerce -n ${JENKINS_GOGS_USER}-stage || true"
              sh "oc expose dc/ecommerce --port 8080 -n ${JENKINS_GOGS_USER}-stage || true"
              sh "oc expose svc/ecommerce -n ${JENKINS_GOGS_USER}-stage || true"
            } // script
          }// steps
        } // stage

        stage('Promote to Stage?') {
          steps {
            timeout(time: 7, unit: 'DAYS') {
              input message: "Do you want to deploy to ${JENKINS_GOGS_USER}-stage?"
            } // timeout
            sh "oc tag ${JENKINS_GOGS_USER}/ecommerce:latest ${JENKINS_GOGS_USER}-stage/ecommerce:latest"
            sh "oc rollout status dc/ecommerce -n ${JENKINS_GOGS_USER}-stage"
          } // steps
        } // stage

        stage('Configure Prod Project') {
          steps {
            script {
              sh "set +x ; oc login -u ${JENKINS_GOGS_USER} -p ${JENKINS_SSH_PASSWORD} --insecure-skip-tls-verify https://kubernetes.default.svc"
              sh "oc create is ecommerce -n ${JENKINS_GOGS_USER}-prod || true"
              sh "oc new-app ecommerce --image-stream=ecommerce --allow-missing-images --allow-missing-imagestream-tags -n ${JENKINS_GOGS_USER}-prod || true"
              sh "oc expose dc/ecommerce -n ${JENKINS_GOGS_USER}-prod || true"
              sh "oc expose dc/ecommerce --port 8080 -n ${JENKINS_GOGS_USER}-prod || true"
              sh "oc expose svc/ecommerce -n ${JENKINS_GOGS_USER}-prod || true"
            } // script
          }// steps
        } // stage

        stage('Promote to Prod?') {
          steps {
            timeout(time: 7, unit: 'DAYS') {
              input message: "Do you want to deploy to ${JENKINS_GOGS_USER}-prod?"
            } // timeout
            sh "oc tag ${JENKINS_GOGS_USER}-stage/ecommerce:latest ${JENKINS_GOGS_USER}-prod/ecommerce:latest"
            sh "oc rollout status dc/ecommerce -n ${JENKINS_GOGS_USER}-prod"
          } // steps
        } // stage

      } // stages

    } // pipeline





